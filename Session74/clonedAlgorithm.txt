Input: adjList = 

1 -> [2,4],
2 -> [1,3],
3 -> [2,4],
4 -> [1,3]

cloneNode(1) : [2,4]

	cloneNode(2): [1,3]
			As cloneNode(1) as already present link 2 -> 1
			cloneNode(3): [2,4]
				As cloneNode(2) as already present link 3 -> 2
				cloneNode(4): [1,3]
					As cloneNode(1) as already present link 4 -> 1
					As cloneNode(3) as already present link 4 -> 3
			As cloneNode(4): execution completed link 3->4
	As cloneNode(3): execution completed link 2->3

As cloneNode(2): execution completed link 1->2
As cloneNode(4) as already present link   1 -> 4


public Node cloneGraph(Node node)
{
	Map<Node, Node> clonedMap = new LinkedHashMap<>();
	return cloneGraph(node, clonedMap);
}

// Map: key [original Node]
// Map: value [associated ClonedNode]
// Time Complexity : O(V + E)
// Space Complexity : O(V+E)
// 1 -> [2,4]
// 2 -> [1,3]
// 3 -> [2,4]
// 4 -> [1,3]
/* clone(1)
		clone(2)
			clone(1) ::  return clonedNode(1)
			clone(3)

		clone(4)
*/
public Node cloneGraph(Node node, Map<Node, Node> clonedMap)
{
	if(clonedMap.get(node) == null)
	{
		map.put(node, new Node(node.val));
		List<Node> neighbors = node.neighbors;
		for(Node nei : neighbors)
		{
			map.get(node).neighbors.add(cloneGraph(nei,clonedMap));
		}
	}

	return clonedMap.get(node);
}



class Node
{
	int val;
	List<Node> neighbors ;
}

Node clonedNode = graph.clone(map.get(1));

Set<Node> visisted = new LinkedHashSet<>();
Queue<Node> queue = new LinkedList<>();

queue.add(clonedNode);
	while(!queue.isEmpty())
	{
		Node node  = queue.remove();

		if(! visisted(node))
		{
			visisted.add(node);
			node.printVertex();
			for(Node nei : node.neighbors)
			{
				queue.add(nei);
			}
		}
	}









